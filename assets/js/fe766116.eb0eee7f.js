"use strict";(self.webpackChunkfdm_monster_docs=self.webpackChunkfdm_monster_docs||[]).push([[6381],{2968:e=>{e.exports=JSON.parse('{"permalink":"/blog/fdm-monster-release-1-8-3","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/2025/03-15 FDM Monster release 1.8.3/index.mdx","source":"@site/blog/2025/03-15 FDM Monster release 1.8.3/index.mdx","title":"FDM Monster release 1.8.3","description":"FDM Monster version 1.8.3 has been released!","date":"2025-03-15T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/blog/tags/releases"}],"readingTime":4.35,"hasTruncateMarker":true,"authors":[{"name":"David Zwart","title":"Founder / Lead Developer","url":"https://github.com/davidzwa","page":{"permalink":"/blog/authors/davidzwa"},"socials":{"github":"https://github.com/davidzwa","linkedin":"https://www.linkedin.com/in/david-zwart-88514083/"},"imageURL":"https://github.com/davidzwa.png","key":"davidzwa"}],"frontMatter":{"title":"FDM Monster release 1.8.3","authors":["davidzwa"],"tags":["releases"],"slug":"/fdm-monster-release-1-8-3","description":"FDM Monster version 1.8.3 has been released!"},"unlisted":false,"lastUpdatedAt":1744554695000,"lastUpdatedBy":"Maurice Kevenaar","nextItem":{"title":"FDM Monster release 1.8.2","permalink":"/blog/fdm-monster-release-1-8-2"}}')},3049:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>n,toc:()=>d});var n=s(2968),r=s(4848),i=s(8453);const o={title:"FDM Monster release 1.8.3",authors:["davidzwa"],tags:["releases"],slug:"/fdm-monster-release-1-8-3",description:"FDM Monster version 1.8.3 has been released!"},a=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Highlights of this release",id:"highlights-of-this-release",level:2},{value:"Printer Thumbnail improvement (experimental feature)",id:"printer-thumbnail-improvement-experimental-feature",level:3},{value:"Print upload bar would get stuck",id:"print-upload-bar-would-get-stuck",level:3},{value:"Support paths in Printer URLs (like octoprint_deploy)",id:"support-paths-in-printer-urls-like-octoprint_deploy",level:3},{value:"Http client with builder pattern",id:"http-client-with-builder-pattern",level:3},{value:"Avoid serializing SocketIO messages twice",id:"avoid-serializing-socketio-messages-twice",level:3},{value:"Smaller chores and fixes",id:"smaller-chores-and-fixes",level:3},{value:"Issues",id:"issues",level:2},{value:"Bugs",id:"bugs",level:3},{value:"Contributors",id:"contributors",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Version ",(0,r.jsx)(t.strong,{children:"1.8.3"})," of FDM Monster has been released! This release ships with FDM Monster Client 1.9.0."]}),"\n",(0,r.jsx)(t.h2,{id:"highlights-of-this-release",children:"Highlights of this release"}),"\n",(0,r.jsxs)(t.p,{children:["This release includes new features, improvements and bug fixes to both FDM Monster and FDM Monster Client since the ",(0,r.jsx)(t.a,{href:"/blog/fdm-monster-release-1-8-2",children:"FDM Monster 1.8.2 release"}),"!"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Printer Thumbnail improvement (experimental feature)"}),"\n",(0,r.jsx)(t.li,{children:"Print upload bar would get stuck"}),"\n",(0,r.jsx)(t.li,{children:"Support paths in Printer URLs (like octoprint_deploy)"}),"\n",(0,r.jsx)(t.li,{children:"Http client with builder pattern"}),"\n",(0,r.jsx)(t.li,{children:"SocketIO messages are not serialized twice"}),"\n",(0,r.jsx)(t.li,{children:"Smaller chores on the repository"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"printer-thumbnail-improvement-experimental-feature",children:"Printer Thumbnail improvement (experimental feature)"}),"\n",(0,r.jsx)(t.p,{children:"The thumbnail feature has been introduced as an experimental feature since FDM Monster v1.8.0. Since then the thumbnail feature has received a bugfix in v1.8.1 within the UI. In this release the thumbnail will only change after the printed file has been uploaded and accepted by OctoPrint."}),"\n",(0,r.jsxs)(t.p,{children:["This change however was not enough, it was found that even when OctoPrint is busy the thumbnail will change. This is tracked in ",(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/4138",children:"this issue"})," that will be tackled in a future release."]}),"\n",(0,r.jsx)(t.h3,{id:"print-upload-bar-would-get-stuck",children:"Print upload bar would get stuck"}),"\n",(0,r.jsx)(t.p,{children:"Whenever a user uploads a file, the upload bar will show. This works in two stages: first the file is uploaded and then the file is forward to a printer service (OctoPrint, Moonraker, etc). In the second stage the upload progress got stuck and the UI got showed a frozen progress bar that would not disappear, even after page reload by pressing F5. The correct upload progress is now sent to the UI and when the upload succeeds/fails the progress bar will disappear."}),"\n",(0,r.jsxs)(t.p,{children:["The design of the upload bar is not very clear yet. Also it is not clear what files have been uploaded in the past. These are known challenges captured in ",(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/4148",children:"this GitHub feature"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"support-paths-in-printer-urls-like-octoprint_deploy",children:"Support paths in Printer URLs (like octoprint_deploy)"}),"\n",(0,r.jsxs)(t.p,{children:["Printers that use octoprint_deploy ",(0,r.jsx)(t.code,{children:"/printer1"})," path based routing would not connect properly. The path would not be consistently used in FDM Monster backend. The fix was to standardize the URL usage across the codebase for both HTTP calls as well as Websocket clients. This means that now the URL path is preserved across all supported\nprinter services (OctoPrint, Moonraker, etc)."]}),"\n",(0,r.jsx)(t.h3,{id:"http-client-with-builder-pattern",children:"Http client with builder pattern"}),"\n",(0,r.jsxs)(t.p,{children:["Previously in the FDM Monster codebase, http clients were constructed using custom methods building on top of a static ",(0,r.jsx)(t.code,{children:"axios"})," instance. This was hard to work with because some places required a customized http timeout, different URL, different headers or different request/response handling. This was growing too complex.\nBy introducing a builder pattern, the http clients in the codebase can reuse the same logic, but choose which combination is required for that place. Also, the builder pattern allows to chain customization or overrides using the fluent pattern."]}),"\n",(0,r.jsx)(t.p,{children:"Before (no chaining using the builder pattern) \ud83d\ude25"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'const headers = {\n  ...options.headers,\n  ...formData.getHeaders(),\n  "Content-Length": result,\n};\n\nconst response = await axios({\n  method: "POST",\n  url,\n  data: formData,\n  headers,\n  onUploadProgress: (p: AxiosProgressEvent) => {\n    if (token) {\n      this.eventEmitter2.emit(`${uploadProgressEvent(token)}`, token, p);\n    }\n  },\n});\n'})}),"\n",(0,r.jsx)(t.p,{children:"After (chained customization and reuse) \ud83e\udd73"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"const response = await this.createClient(login, (builder) =>\n  builder\n    .withMultiPartFormData()\n    .withHeaders({\n      ...formData.getHeaders(),\n    })\n    .withOnUploadProgress((p: AxiosProgressEvent) => {\n      if (token) {\n        this.eventEmitter2.emit(`${uploadProgressEvent(token)}`, token, p);\n      }\n    })\n).post(urlPath, formData);\n"})}),"\n",(0,r.jsx)(t.p,{children:"When working with the builder, the developer gets suggestions of what other methods can be chained on top. This invites the code to be reused whilst reducing duplication of complicated logic. All in all a great improvement! \ud83e\udd73"}),"\n",(0,r.jsx)(t.h3,{id:"avoid-serializing-socketio-messages-twice",children:"Avoid serializing SocketIO messages twice"}),"\n",(0,r.jsxs)(t.p,{children:["The UI of FDM Monster Client receives server updates over SocketIO. Each message needs to be serialized by the server and deserialized by the client. This serialization step, however, was done an extra time by the server requiring the client to deserialize it another time as well. This was double work, because SocketIO internally already does both required steps on the sending and receiving end.\nNow that this has been simplified, the server requires the client to be updated to ",(0,r.jsx)(t.code,{children:"1.9.0"})," in order to not create an incompatibility."]}),"\n",(0,r.jsx)(t.h3,{id:"smaller-chores-and-fixes",children:"Smaller chores and fixes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"installations"})," folder was removed from the repository for the sake of removing clutter. The contents wer not directly related to or not used anymore for FDM Monster."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"requests"})," folder was moved into the test folder. It is used when testing and therefore this made more sense."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"issues",children:"Issues"}),"\n",(0,r.jsxs)(t.p,{children:["As part of this release ",(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/milestone/28?closed=1",children:"6 issues"})," were closed."]}),"\n",(0,r.jsx)(t.h3,{id:"bugs",children:"Bugs"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/4086",children:"#4086"})," [Bug]: failed upload still ends up in changed thumbnail"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/4117",children:"#4117"})," [Change]: dont serialize SocketIO messages on backend, dont parse on frontend"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/4077",children:"#4077"})," [Bug]: Uploading GCode causes the upload bar to show indefinitely"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/4080",children:"#4080"})," [Chore]: Clean up resources on the repository"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/3944",children:"#3944"})," [Bug]: Printers that use octoprint_deploy /instancename path based routing will not connect properly"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/4074",children:"#4074"})," [Maintenance]: HttpClient does not use configurable timeout across codebase"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["If you encounter issues with this release, please create an issue at our ",(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues",children:"GitHub issues"})," or join our ",(0,r.jsx)(t.a,{href:"https://discord.gg/mwA8uP8CMc",children:"Discord"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"contributors",children:"Contributors"}),"\n",(0,r.jsxs)(t.p,{children:["This release was made possible thanks to the ",(0,r.jsx)(t.a,{href:"https://docs.fdm-monster.net/docs/community/ourteam",children:"FDM Monster team"}),". Special thanks to the feedback of these awesome community members:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/AbbeDabbe",children:"AbbeDabbe"})," for reporting ",(0,r.jsx)(t.a,{href:"https://github.com/fdm-monster/fdm-monster/issues/3944",children:"this octoprint_deploy bug"})," that has been fixed."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Full details of what has been included can be seen below."})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(6540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);